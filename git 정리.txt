git 설치

git 환경설정
git bash 실행
git config --global user.name "이름"
git config --global user.email "가입이메일"

처음 프로젝트 올릴 때 사용
git init

깃 상태 확인
git status

커밋
git add .
git commit -m "first commit"

repository 등록
git remote add origin {remote repository 주소}

최종에 푸시
git push origin master

다른 브렌치 생성
git checkout -b 브렌치명
다른 브랜치에 푸쉬
git push origin 브렌치명

다른 브랜치 코드 합치기
git merge 브렌치명

* merge를 사용해 합치기가 안될 경우 브렌치 변경 후 pull
git checkout master
git pull origin master

github 홈페이지에서 pull requests 요청
마스터가 merge pull request 눌러주면 master에 합쳐짐

브랜치 삭제
git branch -d 브렌치명

깃 다운
코드 복사
git clone 복사주소 넣을폴더명

코드를 프로그램으로 실행
cd 넣을폴더명
code .

마스터 코드가 달라질경우 동기화 시켜줘야 한다.
git add .
git commint -m "second commit"
git pull origin master

동기화 후 push
git push origin master


# Please commit your changes or stash them before you switch branches. 오류 해결
# 현재 Staging 영역에 있는 파일의 변경사항을 스택에 넣어둡니다. 
$ git stash
# 아래 명령어와 같이 원격 저장소의 master에서 pull을 하거나, git checkout master와 같이 브랜치를 바꿀 수 있습니다. 
$ git pull origin master
# stash 명령어로 스택에 넣어둔 변경 사항을 적용하고, 스택에서 제거하여줍니다.
$ git stash pop


원하는 브런치만 가져오기
$ git clone -b 브런치명 --single-branch git주소


깃 복구하기 전 복구할 commit id 확인
$ git log
깃 복구
$ git reset --hard commit_id


# warning: LF will be replaced by CRLF 오류 해결
$ git config --global core.autocrlf true


깃 repository 변경
$ git remote set-url origin 새로운URL
변경 확인
$ git remote -v
변경 적용 (동기화)
$ git remote update origin --prune


깃 브랜치 전환
$ git checkout 브랜치명


깃 강제 적용
$ git fetch --all
$ git reset --hard origin/master
$ git pull origin master

깃 강제 push
$ git push -u origin master --force


깃 레파지토리 합치기
1. 대표로 사용할 Repository 생성
2. 생성한 Repository를 로컬 저장소로 clone
$ git clone Repository주소
3. 아무 내용, 파일을 생성해서 커밋
4. Repository 합치기 (넣을 폴더명에 없는 폴더명 입력할 경우 폴더가 생성되어 들어가며 default 브런치를 가져올경우 브랜치명은 생략 가능)
$ git subtree add --prefix=넣을폴더명 Repository주소 브랜치명

