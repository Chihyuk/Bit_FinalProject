final project에 맞게 설정

===========================================================================================

1. 사용자 생성

$ sudo su -
$ sudo adduser 사용자이름

$ sudo visudo 			# 아래와 같이 입력
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
root 	ALL=(ALL:ALL) ALL
사용자이름 ALL=(ALL:ALL) ALL <- 추가 후 :wq 로 저장
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
ctrl + x → y → enter 

$ sudo su 사용자이름 

===========================================================================================

2. 아나콘다

$ cd
$ mkdir Downloads
$ cd Downloads
$ wget https://repo.continuum.io/archive/Anaconda3-2021.11-Linux-x86_64.sh
$ bash A*

- 다 yes

$ vi ~/.bashrc 			# 아래와 같이 입력
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
# .bashrc
# added by Anaconda3 2018.12 installer
# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$(CONDA_REPORT_ERRORS=false '/home/amos/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    \eval "$__conda_setup"
else
    if [ -f "/home/amos/anaconda3/etc/profile.d/conda.sh" ]; then
 . "/home/amos/anaconda3/etc/profile.d/conda.sh"
CONDA_CHANGEPS1=false conda activate base
    else
\export PATH="/home/username/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda init <<<
	
export PATH=~/anaconda3/bin:$PATH			# 경로 설정
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

$ source ~/.bashrc
$ conda --version					# 버전 확인


$ cd ~
$ conda search python 				# 파이썬 버전 확인
$ conda create -n 가상환경명 python=파이썬 버전		# conda create -n final python=3.8.10
$ conda init bash					# 창 닫았다가 다시 실행

$ conda activate 가상환경명				# 콘다 실행
$ conda deactivate 					# 콘다 종료

===========================================================================================

3. git
$ git clone -b 브랜치명(master4) --single-branch 깃허브 주소		# git clone -b master4 --single-branch https://github.com/MIN-JEA-KIM/123.git

===========================================================================================

4. install, setting

※ 파이썬 버전 맞춰 설치가 필요한 경우
sudo apt install python3.8

$ sudo apt-get update
$ sudo apt-get upgrade -y
$ sudo apt-get install mysql-server -y
$ sudo ufw allow mysql
$ sudo systemctl start mysql
$ sudo systemctl enable mysql
$ sudo apt-get install python3-dev default-libmysqlclient-dev build-essential -y
$ sudo apt-get install python3-tk

$ conda install django==3.1.3 -y
$ conda install pymysql -y
$ pip install django-bootstrap4
$ pip install django-mathfilters
$ pip install whitenoise				# css 설정

$ cd ~~/manage.py가 있는 장고 폴더/settings.py가 있는 장고 폴더
$ vi settings.py					# 아래 추가 및 설정 변경
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
import pymysql					# 추가
pymysql.install_as_MySQLdb() 			# 추가

ALLOWED_HOSTS = ['*']     				# 자신 ip address 입력 or 전체 허용하는 * 입력

MIDDLEWARE = [
	...
	'whitenoise.middleware.WhiteNoiseMiddleware',	# 추가
	...
]

USE_TZ = False					# GMT 시차 설정 해제
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

:wq 로 저장하여 나가기				


$ cd ~~/manage.py가 있는 장고 폴더
$ pip install -r requirements.txt			# 환경 맞춰주기
$ python manage.py runserver 0:8000			# 확인


$ conda install gunicorn
$ gunicorn --version				# gunicorn 설치 확인
$ cd ~~/manage.py가 있는 장고 폴더
$ gunicorn --bind 0:8000 프로젝트명.wsgi:application		# gunicorn 테스트	gunicorn --bind 0:8000 mysite.wsgi:application

$ gunicorn --bind unix:/tmp/gunicorn.sock 프로젝트명.wsgi:application		# 테스트 확인 후 해당 코드로 실행	$ gunicorn --bind unix:/tmp/gunicorn.sock mysite.wsgi:application


$ sudo apt-get install nginx
$ sudo service nginx start
$ sudo rm -f /etc/nginx/sites-enabled/default 		# 불필요한 파일 삭제
$ sudo vi /etc/nginx/sites-enabled/default 		# 아래와 같이 입력
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#mysite
server{
	listen 80;
	server_name 우분투호스트아이피;		# server_name 54.180.85.106;

   	access_log /var/log/nginx/reverse-access.log;
   	error_log /var/log/nginx/reverse-error.log;

   	location /{
      		proxy_pass http://unix:/tmp/gunicorn.sock;
      		proxy_set_header REMOTE_ADDR $remote_addr;
      		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      		proxy_set_header X-Real-IP $remote_addr;
      		proxy_redirect off;
   	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

$ sudo service nginx restart


$ sudo vi /etc/systemd/system/gunicorn.service	# 아래와 같이 입력하여 자동 실행 설정
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=amos #로그인 할 때 user
Group=amos #터미널에서 groups 명령어를 쳤을 때 나오는 group
WorkingDirectory=/home/project/123/ #config 파일, manage.py가 있는 경로 
ExecStart=/home/sangwoo/anaconda3/envs/Django/bin/gunicorn --workers 2 --bind unix:/tmp/gunicorn.sock mysite.wsgi:application --timeout 600
# worker 2는 Gunicorn 프로세스를 2개 사용하라는 의미
# ExecStart = Django venv가 위치한 곳의 gunicorn 경로 (conda info --envs를 쳐보면 나온 주소) + /bin/gunicorn

[Install]
WantedBy=multi-user.target 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

※ conda를 사용하지 않았을 경우 경로는 /home/ubuntu/.local/bin/gunicorn 이다.

$ find ~~manage.py가 있는 장고 폴더 경로 -exec chmod 777 {} \;		# 권한 설정(안해도 된다)		find /home/fuck/123 -exec chmod 777 {} \;
$ sudo systemctl start gunicorn.service
$ sudo systemctl daemon-reload
$ sudo systemctl enable gunicorn
$ sudo systemctl status gunicorn.service			# gunicorn service 실행 확인 

===========================================================================================

5. 실행 모음

$ sudo service nginx restart				# nginx 다시 시작

$ sudo systemctl start gunicorn.service		# gunicorn 시작

$ sudo systemctl restart gunicorn.service		# gunicorn 재시작

$ sudo systemctl daemon-reload			# 데몬 재시작

$ sudo systemctl status nginx			# nginx 상태 확인

$ sudo systemctl status gunicorn.service		# gunicorn 상태 확인

$ cd ~~/manage.py가 있는 장고 폴더
$ gunicorn --bind unix:/tmp/gunicorn.sock mysite.wsgi:application	# gunicorn으로 django 실행

===========================================================================================

6. EC2 변경 시
$ sudo vi /etc/nginx/sites-enabled/default		# ip 주소 변경

$ sudo vi /etc/systemd/system/gunicorn.service	# 작업 경로 확인

$ sudo systemctl daemon-reload			# 데몬 재시작

$ sudo systemctl status gunicorn.service		# gunicorn 상태 확인